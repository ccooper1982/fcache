// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_KVRESPONSE_FC_RESPONSE_H_
#define FLATBUFFERS_GENERATED_KVRESPONSE_FC_RESPONSE_H_

#include "flatbuffers/flatbuffers.h"
#include "flatbuffers/flexbuffers.h"
#include "flatbuffers/flex_flat_util.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 12 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

#include "common_generated.h"

namespace fc {
namespace response {

struct KVSet;
struct KVSetBuilder;

struct KVRmv;
struct KVRmvBuilder;

struct KVAdd;
struct KVAddBuilder;

struct KVClear;
struct KVClearBuilder;

struct KVClearSet;
struct KVClearSetBuilder;

struct KVGet;
struct KVGetBuilder;

struct KVContains;
struct KVContainsBuilder;

struct KVCount;
struct KVCountBuilder;

struct KVSet FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef KVSetBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct KVSetBuilder {
  typedef KVSet Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit KVSetBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<KVSet> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<KVSet>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<KVSet> CreateKVSet(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  KVSetBuilder builder_(_fbb);
  return builder_.Finish();
}

struct KVRmv FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef KVRmvBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct KVRmvBuilder {
  typedef KVRmv Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit KVRmvBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<KVRmv> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<KVRmv>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<KVRmv> CreateKVRmv(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  KVRmvBuilder builder_(_fbb);
  return builder_.Finish();
}

struct KVAdd FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef KVAddBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct KVAddBuilder {
  typedef KVAdd Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit KVAddBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<KVAdd> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<KVAdd>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<KVAdd> CreateKVAdd(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  KVAddBuilder builder_(_fbb);
  return builder_.Finish();
}

struct KVClear FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef KVClearBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct KVClearBuilder {
  typedef KVClear Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit KVClearBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<KVClear> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<KVClear>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<KVClear> CreateKVClear(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  KVClearBuilder builder_(_fbb);
  return builder_.Finish();
}

struct KVClearSet FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef KVClearSetBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct KVClearSetBuilder {
  typedef KVClearSet Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit KVClearSetBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<KVClearSet> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<KVClearSet>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<KVClearSet> CreateKVClearSet(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  KVClearSetBuilder builder_(_fbb);
  return builder_.Finish();
}

struct KVGet FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef KVGetBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KV = 4
  };
  const ::flatbuffers::Vector<uint8_t> *kv() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_KV);
  }
  flexbuffers::Reference kv_flexbuffer_root() const {
    const auto _f = kv();
    return _f ? flexbuffers::GetRoot(_f->Data(), _f->size())
              : flexbuffers::Reference();
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_KV) &&
           verifier.VerifyVector(kv()) &&
           flexbuffers::VerifyNestedFlexBuffer(kv(), verifier) &&
           verifier.EndTable();
  }
};

struct KVGetBuilder {
  typedef KVGet Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_kv(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> kv) {
    fbb_.AddOffset(KVGet::VT_KV, kv);
  }
  explicit KVGetBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<KVGet> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<KVGet>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<KVGet> CreateKVGet(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> kv = 0) {
  KVGetBuilder builder_(_fbb);
  builder_.add_kv(kv);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<KVGet> CreateKVGetDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *kv = nullptr) {
  auto kv__ = kv ? _fbb.CreateVector<uint8_t>(*kv) : 0;
  return fc::response::CreateKVGet(
      _fbb,
      kv__);
}

struct KVContains FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef KVContainsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEYS = 4
  };
  const ::flatbuffers::Vector<uint8_t> *keys() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_KEYS);
  }
  flexbuffers::Reference keys_flexbuffer_root() const {
    const auto _f = keys();
    return _f ? flexbuffers::GetRoot(_f->Data(), _f->size())
              : flexbuffers::Reference();
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_KEYS) &&
           verifier.VerifyVector(keys()) &&
           flexbuffers::VerifyNestedFlexBuffer(keys(), verifier) &&
           verifier.EndTable();
  }
};

struct KVContainsBuilder {
  typedef KVContains Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_keys(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> keys) {
    fbb_.AddOffset(KVContains::VT_KEYS, keys);
  }
  explicit KVContainsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<KVContains> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<KVContains>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<KVContains> CreateKVContains(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> keys = 0) {
  KVContainsBuilder builder_(_fbb);
  builder_.add_keys(keys);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<KVContains> CreateKVContainsDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *keys = nullptr) {
  auto keys__ = keys ? _fbb.CreateVector<uint8_t>(*keys) : 0;
  return fc::response::CreateKVContains(
      _fbb,
      keys__);
}

struct KVCount FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef KVCountBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_COUNT = 4
  };
  uint64_t count() const {
    return GetField<uint64_t>(VT_COUNT, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_COUNT, 8) &&
           verifier.EndTable();
  }
};

struct KVCountBuilder {
  typedef KVCount Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_count(uint64_t count) {
    fbb_.AddElement<uint64_t>(KVCount::VT_COUNT, count, 0);
  }
  explicit KVCountBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<KVCount> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<KVCount>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<KVCount> CreateKVCount(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t count = 0) {
  KVCountBuilder builder_(_fbb);
  builder_.add_count(count);
  return builder_.Finish();
}

}  // namespace response
}  // namespace fc

#endif  // FLATBUFFERS_GENERATED_KVRESPONSE_FC_RESPONSE_H_
