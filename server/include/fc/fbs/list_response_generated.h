// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LISTRESPONSE_FC_RESPONSE_H_
#define FLATBUFFERS_GENERATED_LISTRESPONSE_FC_RESPONSE_H_

#include "flatbuffers/flatbuffers.h"
#include "flatbuffers/flexbuffers.h"
#include "flatbuffers/flex_flat_util.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 12 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

#include "common_generated.h"

namespace fc {
namespace response {

struct ListCreate;
struct ListCreateBuilder;

struct ListAdd;
struct ListAddBuilder;

struct ListDelete;
struct ListDeleteBuilder;

struct ListRemove;
struct ListRemoveBuilder;

struct ListRemoveIf;
struct ListRemoveIfBuilder;

struct ListGetRange;
struct ListGetRangeBuilder;

struct ListCreate FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ListCreateBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct ListCreateBuilder {
  typedef ListCreate Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit ListCreateBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ListCreate> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ListCreate>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ListCreate> CreateListCreate(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  ListCreateBuilder builder_(_fbb);
  return builder_.Finish();
}

struct ListAdd FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ListAddBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct ListAddBuilder {
  typedef ListAdd Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit ListAddBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ListAdd> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ListAdd>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ListAdd> CreateListAdd(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  ListAddBuilder builder_(_fbb);
  return builder_.Finish();
}

struct ListDelete FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ListDeleteBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct ListDeleteBuilder {
  typedef ListDelete Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit ListDeleteBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ListDelete> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ListDelete>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ListDelete> CreateListDelete(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  ListDeleteBuilder builder_(_fbb);
  return builder_.Finish();
}

struct ListRemove FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ListRemoveBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct ListRemoveBuilder {
  typedef ListRemove Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit ListRemoveBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ListRemove> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ListRemove>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ListRemove> CreateListRemove(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  ListRemoveBuilder builder_(_fbb);
  return builder_.Finish();
}

struct ListRemoveIf FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ListRemoveIfBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct ListRemoveIfBuilder {
  typedef ListRemoveIf Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit ListRemoveIfBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ListRemoveIf> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ListRemoveIf>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ListRemoveIf> CreateListRemoveIf(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  ListRemoveIfBuilder builder_(_fbb);
  return builder_.Finish();
}

struct ListGetRange FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ListGetRangeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ITEMS = 4,
    VT_TYPE = 6
  };
  const ::flatbuffers::Vector<uint8_t> *items() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_ITEMS);
  }
  flexbuffers::Reference items_flexbuffer_root() const {
    const auto _f = items();
    return _f ? flexbuffers::GetRoot(_f->Data(), _f->size())
              : flexbuffers::Reference();
  }
  fc::common::ListType type() const {
    return static_cast<fc::common::ListType>(GetField<int8_t>(VT_TYPE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ITEMS) &&
           verifier.VerifyVector(items()) &&
           flexbuffers::VerifyNestedFlexBuffer(items(), verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE, 1) &&
           verifier.EndTable();
  }
};

struct ListGetRangeBuilder {
  typedef ListGetRange Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_items(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> items) {
    fbb_.AddOffset(ListGetRange::VT_ITEMS, items);
  }
  void add_type(fc::common::ListType type) {
    fbb_.AddElement<int8_t>(ListGetRange::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  explicit ListGetRangeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ListGetRange> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ListGetRange>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ListGetRange> CreateListGetRange(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> items = 0,
    fc::common::ListType type = fc::common::ListType_Int) {
  ListGetRangeBuilder builder_(_fbb);
  builder_.add_items(items);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ListGetRange> CreateListGetRangeDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *items = nullptr,
    fc::common::ListType type = fc::common::ListType_Int) {
  auto items__ = items ? _fbb.CreateVector<uint8_t>(*items) : 0;
  return fc::response::CreateListGetRange(
      _fbb,
      items__,
      type);
}

}  // namespace response
}  // namespace fc

#endif  // FLATBUFFERS_GENERATED_LISTRESPONSE_FC_RESPONSE_H_
