// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LISTRESPONSE_FC_RESPONSE_H_
#define FLATBUFFERS_GENERATED_LISTRESPONSE_FC_RESPONSE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 12 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

#include "common_generated.h"

namespace fc {
namespace response {

struct ListCreate;
struct ListCreateBuilder;

struct ListAdd;
struct ListAddBuilder;

struct ListCreate FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ListCreateBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct ListCreateBuilder {
  typedef ListCreate Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit ListCreateBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ListCreate> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ListCreate>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ListCreate> CreateListCreate(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  ListCreateBuilder builder_(_fbb);
  return builder_.Finish();
}

struct ListAdd FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ListAddBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct ListAddBuilder {
  typedef ListAdd Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit ListAddBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ListAdd> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ListAdd>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ListAdd> CreateListAdd(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  ListAddBuilder builder_(_fbb);
  return builder_.Finish();
}

}  // namespace response
}  // namespace fc

#endif  // FLATBUFFERS_GENERATED_LISTRESPONSE_FC_RESPONSE_H_
