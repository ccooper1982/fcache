{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>fcache is a data cache, using Google's FlatBuffers over WebSockets.</p> <p>There is support for key-values, with containers (Arrays, Lists) coming soon.</p> <p>FlatBuffers offer zero-copy deserialising: when the server receives data, it can deserialise without an intermediate step which requires allocating memory (as with ProtoBuf), and is considerably more compact than JSON.</p>"},{"location":"api_py/intro/","title":"Overview","text":"<p>The client uses the connection to send/receive requests and responses, with a separate class for KV specific commands (and in the future, arrays, lists, etc).</p> <p>The command classes require a <code>Client</code> object.</p>"},{"location":"api_py/intro/#connect","title":"Connect","text":"<pre><code>import fc\n\nasync def connect() -&gt; fc.Client:\n  try:\n    client = await fc.fcache(uri='ws://127.0.0.1:1987')\n    # or: client = await fc.fcache(ip='127.0.0.1', port=1987)\n  except:\n    print ('Failed to connect')\n    client = None\n  return client\n</code></pre>"},{"location":"api_py/intro/#kv","title":"KV","text":"<pre><code>from fc.kv import KV\n\nasync def kv():\n  if (client := await connect()) is None:\n    return\n\n  # create API object for KV commands\n  kv = KV(client)\n\n  data = {'user':'user1', 'age':25, 'active':True}\n  await kv.set(data)\n\n  # get single key, returns the value\n  age = await kv.get(key='age')\n  print(f'Age: {age}')\n\n  # get multiple keys, returns dict\n  rsp = await kv.get(keys=['user', 'active'])\n  print(f\"User: {rsp['user']}, Active: {rsp['active']}\")\n</code></pre>"},{"location":"api_py/intro/#exceptions","title":"Exceptions","text":"<ul> <li><code>ResponseError</code> : raised when a failed response is received</li> <li><code>ValueError</code> : raised by the API before a request is sent</li> <li><code>OSError</code> : if opening the connection fails</li> </ul>"},{"location":"api_py/kv/add/","title":"add","text":"<pre><code>async def add(kv: dict) -&gt; None\n</code></pre> <p>Sets new key(s) but unlike set, if a key already exists, the value is not replaced.</p> <p>Warning</p> <p>The value of a key cannot be an iterable. This will be added in a future release.</p>"},{"location":"api_py/kv/add/#examples","title":"Examples","text":"<pre><code>await kv.set({'user':'user1', 'age':25, 'active':True})\n# calling add() will not update age\nawait kv.add({'age':25})\n</code></pre>"},{"location":"api_py/kv/clear/","title":"clear","text":"<pre><code>async def clear() -&gt; None\n</code></pre> <p>Deletes all keys.</p> <p>You can also use <code>clear_set()</code> to delete all keys then set new keys in a single call.</p>"},{"location":"api_py/kv/clear/#examples","title":"Examples","text":"<pre><code>await kv.set({'user':'user1', 'age':25, 'active':True, 'city':'London'})\nawait kv.clear()\n</code></pre>"},{"location":"api_py/kv/clear_set/","title":"clear_set","text":"<pre><code>async def clear_set(kv:dict) -&gt; None:\n</code></pre> <p>Deletes all keys then sets new keys in a single command.</p> <p>Warning</p> <p>The value of a key cannot be an iterable. This will be added in a future release.</p>"},{"location":"api_py/kv/clear_set/#examples","title":"Examples","text":"<pre><code>await kv.set({'k1':10, 'k2':20})\nawait kv.clear_set({'k3':30, 'k4':40})\n# only k3 and k4 exist\n</code></pre>"},{"location":"api_py/kv/contains/","title":"contains","text":"<pre><code>async def contains(keys: list) -&gt; set\n</code></pre> <p>Given a list of keys, return those which exist.</p>"},{"location":"api_py/kv/contains/#returns","title":"Returns","text":"<p>A <code>set</code> of keys that exist.</p>"},{"location":"api_py/kv/contains/#examples","title":"Examples","text":"<pre><code>await kv.set({'user':'user1', 'age':25, 'active':True, 'city':'London'})\nexist = await kv.count()\n# exist contains 'age' and 'user'\n</code></pre>"},{"location":"api_py/kv/count/","title":"count","text":"<pre><code>async def count() -&gt; int\n</code></pre> <p>Gets the number of keys.</p>"},{"location":"api_py/kv/count/#returns","title":"Returns","text":"<p>The number of keys that exist.</p>"},{"location":"api_py/kv/count/#examples","title":"Examples","text":"<pre><code>await kv.set({'user':'user1', 'age':25, 'active':True, 'city':'London'})\ncount = await kv.count() # 4\n</code></pre>"},{"location":"api_py/kv/get/","title":"get","text":"<pre><code>async def get(key=None, keys=[]) -&gt; dict | Any\n</code></pre> <p>Gets a single key or multiple keys.</p>"},{"location":"api_py/kv/get/#returns","title":"Returns","text":"<p>Called with:</p> <ul> <li><code>key</code>: the value is returned</li> <li><code>keys</code>: all key values returned in a <code>dict</code></li> </ul>"},{"location":"api_py/kv/get/#examples","title":"Examples","text":"<pre><code>await kv.set({'user':'user1', 'age':25, 'active':True})\n\n# get single key, returns the value\nage = await kv.get(key='age')\nprint(f'Age: {age}')\n\n# get multiple keys, returns dict\nrsp = await kv.get(keys=['user', 'active'])\nprint(f\"User: {rsp['user']}, Active: {rsp['active']}\")\n</code></pre> <pre><code>Age: 25\nUser: user1, Active: True\n</code></pre>"},{"location":"api_py/kv/remove/","title":"remove","text":"<pre><code>async def remove(key='', keys=[]) -&gt; None\n</code></pre> <p>Deletes one or multiple keys.</p> <ul> <li><code>key</code> : individual key to delete</li> <li><code>keys</code> : list of keys to delete</li> </ul> <p>If a key does not exist it is not considered an error.</p>"},{"location":"api_py/kv/remove/#examples","title":"Examples","text":"<pre><code>await kv.set({'user':'user1', 'age':25, 'active':True, 'city':'London'})\nawait kv.remove(key='age')\nawait kv.remove(keys=['user','city'])\n# only 'active' remains\n</code></pre>"},{"location":"api_py/kv/set/","title":"set","text":"<pre><code>async def set(kv: dict) -&gt; None\n</code></pre> <p>Sets new key(s). If a key already exists, the value is replaced.</p> <p>Warning</p> <p>The value of a key cannot be an iterable. This will be added in a future release.</p>"},{"location":"api_py/kv/set/#examples","title":"Examples","text":"<pre><code>await kv.set({'user':'user1', 'age':25, 'active':True})\n</code></pre>"}]}