include "common.fbs";

namespace fc.request;

enum Base : ubyte
{
  None,
  Head,
  Tail
}


enum Condition : ubyte
{
  None,
  Equals
}


// unions can't contain scalrs.
// And Python (and perhaps others) doesn't like a union
// with a string, so wrap in a table
table IntValue
{
  v:int64;
}
table UIntValue
{
  v:uint64;
}
table FloatValue
{
  v:float;
}
table StringValue
{
  v:string;
}

union Value
{ 
  IntValue,
  UIntValue,
  FloatValue,
  StringValue
}


table Range
{
  start:int32 = 0;
  stop:int32 = 0;
  has_stop:bool = true;
}

table ListCreate
{
  name:string;
  type:common.ListType;
  sorted:bool = false;
}

table ListDelete
{
  name:[string];
}

table ListAdd
{
  name:string;
  items:[ubyte] (flexbuffer);
  position:int32;  // unlikely to have a list that requires higher range than int32
  base: Base;
  items_sorted:bool = false;  // only relevant for sortedlists
}

table ListAppend
{
  name:string;
  items:[ubyte] (flexbuffer);
}

table ListGetRange
{
  name:string;
  range:Range;
  base:Base;
}

table ListRemove
{
  name:string;
  range:Range;
  base:Base; // not used yet
}

table ListRemoveIf
{
  name:string;
  range:Range;
  value:Value;
  condition:Condition;
}

table ListIntersect
{
  list1_name:string;
  list2_name:string;
  list1_range:Range;
  list2_range:Range;
  // if new_name is set:
  //  create list with intersected nodes but don't send new list in response
  // else: return intersected nodes in response
  new_list_name:string; 
}

table ListSet
{
  name:string;
  position:int32;
  base:Base;
  items:[ubyte] (flexbuffer);
}