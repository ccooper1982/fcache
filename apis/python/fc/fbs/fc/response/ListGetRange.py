# automatically generated by the FlatBuffers compiler, do not modify

# namespace: response

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ListGetRange(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ListGetRange()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsListGetRange(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ListGetRange
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ListGetRange
    def Items(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # ListGetRange
    def ItemsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # ListGetRange
    def ItemsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ListGetRange
    def ItemsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # ListGetRange
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def ListGetRangeStart(builder):
    builder.StartObject(2)

def Start(builder):
    ListGetRangeStart(builder)

def ListGetRangeAddItems(builder, items):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(items), 0)

def AddItems(builder, items):
    ListGetRangeAddItems(builder, items)

def ListGetRangeStartItemsVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartItemsVector(builder, numElems):
    return ListGetRangeStartItemsVector(builder, numElems)

def ListGetRangeAddType(builder, type):
    builder.PrependInt8Slot(1, type, 0)

def AddType(builder, type):
    ListGetRangeAddType(builder, type)

def ListGetRangeEnd(builder):
    return builder.EndObject()

def End(builder):
    return ListGetRangeEnd(builder)
