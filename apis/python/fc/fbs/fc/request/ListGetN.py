# automatically generated by the FlatBuffers compiler, do not modify

# namespace: request

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ListGetN(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ListGetN()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsListGetN(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ListGetN
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ListGetN
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ListGetN
    def Start(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ListGetN
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def ListGetNStart(builder):
    builder.StartObject(3)

def Start(builder):
    ListGetNStart(builder)

def ListGetNAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    ListGetNAddName(builder, name)

def ListGetNAddStart(builder, start):
    builder.PrependInt32Slot(1, start, 0)

def AddStart(builder, start):
    ListGetNAddStart(builder, start)

def ListGetNAddCount(builder, count):
    builder.PrependInt32Slot(2, count, 0)

def AddCount(builder, count):
    ListGetNAddCount(builder, count)

def ListGetNEnd(builder):
    return builder.EndObject()

def End(builder):
    return ListGetNEnd(builder)
