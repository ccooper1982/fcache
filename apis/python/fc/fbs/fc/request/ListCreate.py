# automatically generated by the FlatBuffers compiler, do not modify

# namespace: request

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ListCreate(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ListCreate()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsListCreate(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ListCreate
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ListCreate
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ListCreate
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # ListCreate
    def Sorted(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def ListCreateStart(builder):
    builder.StartObject(3)

def Start(builder):
    ListCreateStart(builder)

def ListCreateAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    ListCreateAddName(builder, name)

def ListCreateAddType(builder, type):
    builder.PrependInt8Slot(1, type, 0)

def AddType(builder, type):
    ListCreateAddType(builder, type)

def ListCreateAddSorted(builder, sorted):
    builder.PrependBoolSlot(2, sorted, 0)

def AddSorted(builder, sorted):
    ListCreateAddSorted(builder, sorted)

def ListCreateEnd(builder):
    return builder.EndObject()

def End(builder):
    return ListCreateEnd(builder)
