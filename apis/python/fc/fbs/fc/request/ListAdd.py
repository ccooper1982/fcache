# automatically generated by the FlatBuffers compiler, do not modify

# namespace: request

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ListAdd(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ListAdd()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsListAdd(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ListAdd
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ListAdd
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ListAdd
    def Items(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # ListAdd
    def ItemsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # ListAdd
    def ItemsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ListAdd
    def ItemsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # ListAdd
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ListAdd
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

def ListAddStart(builder):
    builder.StartObject(4)

def Start(builder):
    ListAddStart(builder)

def ListAddAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    ListAddAddName(builder, name)

def ListAddAddItems(builder, items):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(items), 0)

def AddItems(builder, items):
    ListAddAddItems(builder, items)

def ListAddStartItemsVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartItemsVector(builder, numElems):
    return ListAddStartItemsVector(builder, numElems)

def ListAddAddPosition(builder, position):
    builder.PrependInt32Slot(2, position, 0)

def AddPosition(builder, position):
    ListAddAddPosition(builder, position)

def ListAddAddBase(builder, base):
    builder.PrependUint8Slot(3, base, 0)

def AddBase(builder, base):
    ListAddAddBase(builder, base)

def ListAddEnd(builder):
    return builder.EndObject()

def End(builder):
    return ListAddEnd(builder)
